<?php
/* PLEASE NOTE: I renamed this file from the GitHub version 
because it had same name as install profile. This code needs further refactoring */

include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'kendra_saracen_trial_mod') . '/kendra_saracen_trial_mod.callbacks.inc';
function kendra_saracen_trial_init() {
  drupal_add_css('#header {background-color:#323D77;background-image:none;}', array('type' => 'inline'));
}

// Delete kendra_match_recommender_in_values when node is deleted:
function kendra_saracen_trial_node_delete($node) {
  db_delete('kendra_match_recommender_in_values')->condition('nid', $node->nid)->execute();
}

// utility function to put data into recommender input table
function _kendra_saracen_save_recommend($uid = NULL, $nid = NULL, $type = 'rating', $value, $drop = TRUE, $extid = NULL, $source = 'explicit') {
  if ($drop) {
    db_delete('kendra_match_recommender_in_values')->condition('nid', $nid)->condition('uid', $uid)->condition('type', $type)->execute();
  }
  $fvalue = NULL;
  $svalue = NULL;
  if (is_numeric($value)) {
    $fvalue = floatval($value);
  }
  else {
    $svalue = $value;
  }
  if ($type == 'vote' && $value == 0) {
    return;
  }
  $id = db_insert('kendra_match_recommender_in_values')->fields(array(
      'nid' => $nid,
      'uid' => $uid,
      'type' => $type,
      'floatval' => $fvalue,
      'stringval' => $svalue,
      'source' => $source,
      'external_id' => "{$extid}",
    ))->execute();
  return $id;
}

function _kendra_saracen_cache_external_data($external_id, $key = 'facebook') {
  db_delete('external_data_cache')->condition('external_id', $external_id)->execute();
  $url = "https://graph.facebook.com/{$external_id}";
  $response = drupal_http_request($url);
  if ($response->code == 200) {
    $id = db_insert('external_data_cache')->fields(
      array('external_id' => $external_id, 'json' => $response->data)
    )->execute();
  }
  else {
    watchdog('external data', 'error fetching external data: ' . print_r($response, TRUE));
  }
}

function _kendra_saracen_cache_external_data_queue($external_id, $key = 'facebook') {
  $queue             = DrupalQueue::get('kendra_saracen_trial');
  $item              = new stdClass();
  $item->type        = 'fetch_external_data';
  $item->external_id = $external_id;
  $queue->createItem($item);
}

function kendra_saracen_trial_mod_cron_queue_info() {
  return array('kendra_saracen_trial' => array(
      'worker callback' => '_kendra_saracen_queue_worker',
      'time' => 180,
    ));
}

function _kendra_saracen_queue_worker($item) {
  watchdog('queue', "do {$item->type} for {$item->uid}: " . print_r($item, TRUE));
  if ($item->type == 'fetch_external_data') {
    _kendra_saracen_cache_external_data($item->external_id);
  }
  if ($item->type == 'facebook_profile') {
    _kendra_saracen_update_facebook_profile($item);
  }
}

function _kendra_saracen_update_facebook_profile($item) {
  $connections = array('likes', 'movies', 'music');
  $first = TRUE;
  foreach ($connections as $connection) {
    $key = "fb_{$connection}";
    $response = drupal_http_request("https://graph.facebook.com/{$item->fbu}/{$connection}?access_token={$item->access_token}");
    if ($response->code == 200) {
      $data = json_decode($response->data);
      foreach ($data->data as $like) {
        _kendra_saracen_save_recommend($item->uid, NULL, 'profile', $like->name, $first, $like->id);
        $first = FALSE;
        $like->connection = $key;
        _kendra_saracen_save_sparql_fb($item, $like);
      }
    }
    else {
      watchdog('fb debug', 'failed to import: ' . print_r($response, TRUE) . ' for ' . print_r($item, TRUE));
    }
  }
}

function _kendra_saracen_save_sparql_fb($item, $like) {
  watchdog('debug', 'item: ' . print_r($item, TRUE) . ' <br />like: ' . print_r($like, TRUE));
  $id_url = url('user/' . $item->uid, array('absolute' => TRUE));
  $data = array('like' => $like->name);
  //_kendra_saracen_sparql_util('fblikes', $like->connection, $id_url, $data);
  db_delete('sparql_store_fblike_temp')->condition('uid', $item->uid)->condition('external_id', $like->id)->condition('connection', $like->connection)->execute();
  db_insert('sparql_store_fblike_temp')->fields(array(
      'uid' => $item->uid, 'external_id' => $like->id, 'name' => $like->name, 'connection' => $like->connection,
    ))->execute();
}

function _kendra_saracen_sparql_util($store, $graph, $id_url, $data) {
  $store = sparql_get_store($store, SPARQL_ENDPOINT);
  $query = "INSERT INTO <{$graph}> { \n";
  foreach ($data as $key => $value) {
    $value = str_replace('"', '\"', trim($value));
    $predicate = $id_url . '#' . $key;
    $query .= "  <{$id_url}> <{$predicate}> \"{$value}\" . \n";
  }
  $query .= "} \n";
  watchdog('sparql', 'query: ' . $query);
  return $store->query($query);
}

function _kendra_saracen_trial_mod_lookup_id($id) {
  $result = db_query("SELECT entity_id FROM {field_data_field_mediaitem_identifier} 
    WHERE field_mediaitem_identifier_value=:identifier LIMIT 1", array(':identifier' => $id));
  $nid = 0;
  foreach ($result as $record) {
    if (isset($record->entity_id)) {
      $nid = $record->entity_id;
    }
  }
  return $nid;
}

function _kendra_saracen_trial_mod_default_access_callback() {
  return TRUE;
}

/**
 * pull recommended users from `kendra_match_recommender_out_user_to_user` for the current user
 */
function _kendra_saracen_trial_mod_recommend_users($query = NULL, $filter = NULL, $sort = NULL, $page = 0, $page_size = 3) {
  $results     = array();
  $safe_query  = check_plain($query);
  $safe_sort   = check_plain($sort);
  $safe_filter = check_plain($filter);

  //@FIXME: override paging vars, that appear to be NULL
  $page = 0;
  $page_size = 3;

  global $user;
  $uid = $user->uid;

  $sql = sprintf("SELECT users.name, recommended_uid FROM {kendra_match_recommender_out_user_to_user}
       INNER JOIN users ON users.uid=kendra_match_recommender_out_user_to_user.uid                                                                                                                                                                      
       WHERE users.uid = %d and status = 1 
       ORDER BY weight DESC, time DESC LIMIT %s, %s
       ", $uid, $page, $page_size);

  $result = db_query($sql);

  $uids = array();

  foreach ($result as $node) {
    $uids[] = $node->recommended_uid;
  }

  $results = user_load_multiple($uids);

  return $results;
}

/**
 * pull recommended content from `kendra_match_recommender_out_user_to_item` for the current user
 */
function _kendra_saracen_trial_mod_recommend_content($query = NULL, $filter = NULL, $sort = NULL, $page = 0, $page_size = 3) {
  $results     = array();
  $safe_query  = check_plain($query);
  $safe_sort   = check_plain($sort);
  $safe_filter = check_plain($filter);

  //@FIXME: override paging vars, that appear to be NULL
  $page = 0;
  $page_size = 3;

  global $user;
  $uid = $user->uid;

  $sql = sprintf("SELECT DISTINCT recommended_nid FROM {kendra_match_recommender_out_user_to_item}
      WHERE uid = %d AND NOT ISNULL(recommended_nid)
      ORDER BY weight
      DESC, time DESC LIMIT %s, %s
      ", $uid, $page, $page_size);

  $result = db_query($sql);

  foreach ($result as $node) {
    $results[] = node_load($node->recommended_nid);
  }

  return $results;
}

/**
 * search users
 */
function _kendra_saracen_trial_mod_search_users($query = NULL, $filter = NULL, $sort = NULL, $page = 0, $page_size = 10) {
  $results     = array();
  $safe_query  = check_plain($query);
  $safe_sort   = check_plain($sort);
  $safe_filter = check_plain($filter);

  // Invoke the search hook to generate results
  // @todo incorporate $safe_sort, $safe_filter
  $results = module_invoke('user', 'search_execute', $safe_query);
  return $results;
}

/**
 * search content
 */
function _kendra_saracen_trial_mod_search_content($query = NULL, $filter = NULL, $sort = NULL, $page = 0, $page_size = 10) {
  $results = array();
  $search_allowed_types = array('mediaitem');
  $safe_query = check_plain($query);
  $safe_sort = check_plain($sort);
  $safe_filter = check_plain($filter);

  // restrict content types in search results
  $safe_query .= ' ' . join(',', $search_allowed_types);

  // Invoke the search hook to generate results.
  $results = module_invoke('node', 'search_execute', $safe_query);
  return $results;
}

function kendra_saracen_trial_mod_services_resources_controller_post_processing_alter(&$services) {
  $services['user']['operation']['retrieve']['args'][0]['type'] = 'string';
  $services['user']['operation']['retrieve']['access callback'] = '_kendra_saracen_trial_mod_user_retrieve_access_check';
  $services['user']['operation']['retrieve']['callback'] = '_kendra_saracen_trial_mod_user_retrieve_callback';
}

function _kendra_saracen_trial_mod_user_retrieve_access_check($op = 'view', $args = array()) {
  if ($args[0] == 'me') {
    return TRUE;
  }
  else {
    return _user_resource_access($op, $args);
  }
}

function _kendra_saracen_trial_mod_user_retrieve_callback($uid) {
  if ($uid == 'me') {
    global $user;
    $uid = $user->uid;
  }
  return _user_resource_retrieve($uid);
}

