<?php
/* PLEASE NOTE: I renamed this file from the GitHub version 
because it had same name as install profile. This code needs further refactoring */

include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'kendra_saracen_trial_mod') . '/kendra_saracen_trial_mod.callbacks.inc';
function kendra_saracen_trial_init() {
  drupal_add_css('#header {background-color:#323D77;background-image:none;}', array('type' => 'inline'));
}

// Delete kendra_match_recommender_in_values when node is deleted:
function kendra_saracen_trial_node_delete($node) {
  db_delete('kendra_match_recommender_in_values')->condition('nid', $node->nid)->execute();
}

// utility function to put data into recommender input table
function _kendra_saracen_save_recommend($uid = NULL, $nid = NULL, $type = 'rating', $value, $drop = TRUE, $extid = NULL, $source = 'explicit') {
  if ($drop) {
    db_delete('kendra_match_recommender_in_values')->condition('nid', $nid)->condition('uid', $uid)->condition('type', $type)->execute();
  }
  $fvalue = NULL;
  $svalue = NULL;
  if (is_numeric($value)) {
    $fvalue = floatval($value);
  }
  else {
    $svalue = $value;
  }
  if ($type == 'vote' && $value == 0) {
    return;
  }
  $id = db_insert('kendra_match_recommender_in_values')->fields(array(
      'nid' => $nid,
      'uid' => $uid,
      'type' => $type,
      'floatval' => $fvalue,
      'stringval' => $svalue,
      'source' => $source,
      'external_id' => "{$extid}",
    ))->execute();
  return $id;
}

function _kendra_saracen_cache_external_data($external_id, $key = 'facebook') {
  db_delete('external_data_cache')->condition('external_id', $external_id)->execute();
  $url = "https://graph.facebook.com/{$external_id}";
  $response = drupal_http_request($url);
  if ($response->code == 200) {
    $id = db_insert('external_data_cache')->fields(
      array('external_id' => $external_id, 'json' => $response->data)
    )->execute();
  }
  else {
    watchdog('external data', 'error fetching external data: ' . print_r($response, TRUE));
  }
}

function _kendra_saracen_cache_external_data_queue($external_id, $key = 'facebook') {
  $queue             = DrupalQueue::get('kendra_saracen_trial');
  $item              = new stdClass();
  $item->type        = 'fetch_external_data';
  $item->external_id = $external_id;
  $queue->createItem($item);
}

function kendra_saracen_trial_mod_cron_queue_info() {
  return array('kendra_saracen_trial' => array(
      'worker callback' => '_kendra_saracen_queue_worker',
      'time' => 180,
    ));
}

function _kendra_saracen_queue_worker($item) {
  watchdog('queue', "do {$item->type} for {$item->uid}: " . print_r($item, TRUE));
  if ($item->type == 'fetch_external_data') {
    _kendra_saracen_cache_external_data($item->external_id);
  }
  if ($item->type == 'facebook_profile') {
    _kendra_saracen_update_facebook_profile($item);
  }
}

function _kendra_saracen_update_facebook_profile($item) {
  $connections = array('likes', 'movies', 'music');
  $first = TRUE;
  foreach ($connections as $connection) {
    $key = "fb_{$connection}";
    $response = drupal_http_request("https://graph.facebook.com/{$item->fbu}/{$connection}?access_token={$item->access_token}");
    if ($response->code == 200) {
      $data = json_decode($response->data);
      foreach ($data->data as $like) {
        _kendra_saracen_save_recommend($item->uid, NULL, 'profile', $like->name, $first, $like->id);
        $first = FALSE;
        $like->connection = $key;
        _kendra_saracen_save_sparql_fb($item, $like);
      }
    }
    else {
      watchdog('fb debug', 'failed to import: ' . print_r($response, TRUE) . ' for ' . print_r($item, TRUE));
    }
  }
  _kendra_saracen_import_facebook_friend($item);
}

function _kendra_saracen_get_facebook_friends($account, $fbu, $access_code) {
	$fb = "https://graph.facebook.com/{$account->fbu}/friends?access_token={$account->key}";
	$response = drupal_http_request($fb);
	if ($response->code == 200) {
	  $data = json_decode($response->data);
	  return $data->data;
	} else {
		watchdog('fb friend debug2', 'failed to import: ' . print_r($response, TRUE) . ' for ' . print_r($item, TRUE));
	}
	return array();
}

function _kendra_saracen_import_facebook_friend($job) {
	$fb = "https://graph.facebook.com/{$job->fbu}/friends?access_token={$job->access_token}";
	$response = drupal_http_request($fb);
  if ($response->code == 200) {
	  $data = json_decode($response->data);
	  foreach ($data->data as $friend) {
		  $friend->connection = 'friend';
		  _kendra_saracen_save_sparql_fb($job, $friend);
	  }
	} else {
		watchdog('fb friend debug', 'failed to import: ' . print_r($response, TRUE) . ' for ' . print_r($item, TRUE));
	}
}

function _kendra_saracen_save_sparql_fb($item, $like) {
  //watchdog('debug', 'item: ' . print_r($item, TRUE) . ' <br />like: ' . print_r($like, TRUE));
  $id_url = url('user/' . $item->uid, array('absolute' => TRUE));
  $data = array('like' => $like->name);
  //_kendra_saracen_sparql_util('fblikes', $like->connection, $id_url, $data);
  db_delete('sparql_store_fblike_temp')->condition('uid', $item->uid)->condition('external_id', $like->id)->condition('connection', $like->connection)->execute();
  db_insert('sparql_store_fblike_temp')->fields(array(
      'uid' => $item->uid, 'external_id' => $like->id, 'name' => $like->name, 'connection' => $like->connection,
    ))->execute();
}

function _kendra_saracen_sparql_util($store, $graph, $id_url, $data) {
  $store = sparql_get_store($store, SPARQL_ENDPOINT);
  $query = "INSERT INTO <{$graph}> { \n";
  foreach ($data as $key => $value) {
    $value = str_replace('"', '\"', trim($value));
    $predicate = $id_url . '#' . $key;
    $query .= "  <{$id_url}> <{$predicate}> \"{$value}\" . \n";
  }
  $query .= "} \n";
  watchdog('sparql', 'query: ' . $query);
  return $store->query($query);
}

function _kendra_saracen_trial_mod_lookup_id($id) {
  $result = db_query("SELECT entity_id FROM {field_data_field_mediaitem_identifier} 
    WHERE field_mediaitem_identifier_value=:identifier LIMIT 1", array(':identifier' => $id));
  $nid = 0;
  foreach ($result as $record) {
    if (isset($record->entity_id)) {
      $nid = $record->entity_id;
    }
  }
  return $nid;
}

function _kendra_saracen_trial_mod_default_access_callback() {
  return TRUE;
}


/**
 * Implements hook_menu().
 */
function kendra_saracen_trial_mod_menu() {
  $items['admin/kendra-dev-generate'] = array(
    'title' => 'Kendra Dev Generate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_kendra_saracen_trial_dev_generate_data'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}
function _kendra_saracen_trial_dev_generate_data($form, &$form_state) {
	$form['user_ratings'] = array(
		'#type' => 'checkbox',
		'#title' => 'Generate likes/ratings for 50% of content for each user',
		'#default_value' => FALSE,
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Submit',
	);
	return $form;
}
function _kendra_saracen_trial_dev_generate_data_submit($form, &$form_state) {
	if (isset($form_state['values']['user_ratings']) && $form_state['values']['user_ratings'] == 1) {
		$user_query = new EntityFieldQuery();
		$user_query->entityCondition('entity_type', 'user');
		$user_query->propertyCondition('status', 1);
		$accounts = $user_query->execute();
		$uids = array_keys($accounts['user']);
		
		$node_query = new EntityFieldQuery();
		$node_query->entityCondition('entity_type', 'node');
		$node_query->entityCondition('bundle', 'mediaitem');
		$node_query->propertyCondition('status', 1);
		$items = $node_query->execute();
		$nids = array_keys($items['node']);
		$nid_count = count($nids);
		
		foreach ($uids as $uid) {
			shuffle($nids);
			$selected = array_slice($nids, 0, $nid_count / 2);
			foreach ($selected as $nid) { 
				$value = rand(50, 100);
			  _kendra_saracen_trial_mod_add_rate_mediaitem($nid, array('value' => $value), FALSE, $uid);
			  drupal_set_message("User {$uid} rates {$nid} with score {$value}");
			}
		}
	}
}


function _kendra_saracen_trial_mod_start_watching_mediaitem($id) {
	global $user;
	db_update('kendra_mediaitem_watch')
		->fields(array(
			'stop' => REQUEST_TIME,
		))
		->condition('stop', NULL)
		->condition('uid', $user->uid)
		->execute(); 
	return _kendra_saracen_trial_mod_save_live_event($user, $id, REQUEST_TIME, NULL);
}
function _kendra_saracen_trial_mod_stop_watching_mediaitem($id) {
	global $user;
	$closed = db_update('kendra_mediaitem_watch')
		->fields(array(
			'stop' => REQUEST_TIME,
		))
		->condition('stop', NULL)
		->condition('uid', $user->uid)
		->execute();
	return $closed;
}

function _kendra_saracen_trial_mod_get_live_events($account) {
	$results = db_select('kendra_mediaitem_watch', 'w')
		->fields('w')
		->execute();
	$output = array();
	foreach ($results as $r) {
		$output[] = $r;
	}
	return $output;
}

function _kendra_saracen_trial_mod_save_live_event($account, $id, $start = NULL, $stop = NULL) {
	$result = db_insert('kendra_mediaitem_watch')->fields(array(
	  'uid' => $account->uid,
	  'start' => $start,
	  'stop' => $stop,
		'media_id' => $id,
	))->execute();
	return $result;
}






























