<?php

function _kendra_social_albums_update_user($id, $op, $data) {
  $box = node_load($id);
  $account = user_load($data['user']);
  if (isset($box->nid) && isset($account->uid)) {
    // Delete any existing relations
    _kendra_social_albums_delete_user_rel($box->nid, $account->uid);
    // Create new relation
    $endpoints = array(
      array('entity_type' => 'node', 'entity_id' => $box->nid),
      array('entity_type' => 'user', 'entity_id' => $account->uid),
    );
    $relation = relation_create('album_user', $endpoints);
    if (strstr($data['perm'], 'R') !== FALSE) {
      $relation->field_album_perm['und'][] = array('value' => 'view');
    }
    if (strstr($data['perm'], 'W') !== FALSE) {
      $relation->field_album_perm['und'][] = array('value' => 'edit');
    }
    if (!empty($relation->field_album_perm['und'])) {
      $rid = relation_save($relation);
      return array('status' => 'ok', 'message' => "added user ({$account->uid}) to box ({$box->nid})", 'identifier' => $rid);
    } 
    return array('status' => 'ok', 'message' => "deleted user ({$account->uid}) from box ({$box->nid})");
  }
  return array('status' => 'error', 'message' => 'user and album are required');
}


function _kendra_social_albums_delete_user_rel($boxid, $uid) {  
  $query = new EntityFieldQuery();
  $res = $query->entityCondition('entity_type', 'relation')
    ->entityCondition('bundle', 'album_user')
    ->fieldCondition('endpoints', 'entity_id', $boxid, '=')
    ->fieldCondition('endpoints', 'entity_id', $uid, '=')
    ->execute();
  $relation = array_shift($res['relation']);
  relation_delete($relation->rid);
}


function _kendra_social_albums_index() {
  global $user;
  $query = new EntityFieldQuery();
  $user_albums = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'album')
    ->propertyCondition('uid', $user->uid, '=')
    ->execute();    
  $query2 = new EntityFieldQuery();
  $contributed_albums = $query2->entityCondition('entity_type', 'relation')
    ->entityCondition('bundle', 'album_user')
    ->fieldCondition('endpoints', 'entity_id', $user->uid, '=')
    ->execute();
  $output = array();
  foreach ($contributed_albums['relation'] as $rid => $relation) {
    $relation = relation_load($rid);
    $output[$relation->endpoints['und'][0]['entity_id']] = array(
      'id' => $relation->endpoints['und'][0]['entity_id'], 
      'owner' => FALSE,
    );
  }
  foreach ($user_albums['node'] as $nid => $album) {
    $output[$nid] = array('id' => $nid, 'owner' => TRUE);
  }
  return $output;
}
function _kendra_social_albums_create($data) {
  global $user;
  $node  = new StdClass();
  $node->type  = 'album';
  $node->status = 1;
  $node->uid = $user->uid;
  $node->language = 'und';
  if (isset($data['title'])) { 
    $node->title = $data['title'];
  } else {
    return array('status' => 'error', 'message' => 'Title is required');
  }
  if (isset($data['description'])) {
    $node->field_album_description['und'][0]['value'] = $data['description'];
  }
  node_object_prepare($node);
  node_save($node);
  return array('status' => 'ok', 'identifier' => $node->nid, 'message' => 'created new album');
}
function _kendra_social_albums_retrieve($id) {
  $node = node_load($id);
  $box = new StdClass();
  $box->id = $node->nid;
  $box->title = $node->title;
  $box->description = $node->field_album_description[$node->language][0]['value'];
  $box->owner = $node->uid;
  $box->owner_name = $node->name;
  return $box;
}
// TODO: more restricted access control
function _kendra_social_album_access_check($op, $box, $account) {
  if ($op == 'view') {
    return TRUE;
  }
  if ($op == 'edit') {
    if ($box->uid == $account->uid) {
      return TRUE;
    }
    $query = new EntityFieldQuery();
    $albums = $query->entityCondition('entity_type', 'relation')
      ->entityCondition('bundle', 'album_user')
      ->fieldCondition('endpoints', 'entity_id', $box->nid, '=')
      ->fieldCondition('endpoints', 'entity_id', $account->uid, '=')
      ->execute();
    $relation = array_shift($albums['relation']);
    $relation = relation_load($relation->rid);
    foreach ($relation->field_album_perm['und'] as $perm) {
      $perms[] = $perm['value'];
    }
    return in_array('edit', $perms);
  }
  return FALSE;
}
function _kendra_social_albums_add_item($box, $data) {
  $box = node_load($box);
  if (isset($data['item']) && isset($box->nid)) {
    global $user;
    if (_kendra_social_album_access_check('edit', $box, $user)) {
      $media = _kendra_saracen_trial_lookup_id($data['item']);
      if ($media) {
        $endpoints = array(
          array('entity_type' => 'node', 'entity_id' => $box->nid),
          array('entity_type' => 'node', 'entity_id' => $media),
        );
        $relation = relation_create('album_contains', $endpoints);
        $rid = relation_save($relation);
        return array('status' => 'ok', 'message' => "added media item ({$data['item']}) ({$media}) to box ({$box->nid})");
      } else {
        return array('status' => 'error', 'message' => 'no media item found with that id');
      }
    } else {
      return array('status' => 'error', 'message' => 'you do not have access to edit this box');
    }
  } else {
    return array('status' => 'error', 'message' => 'a box ID and item ID is required'); 
  }
}
function _kendra_social_albums_delete_item($box, $data) {
  $box = node_load($box);
  if (isset($data['item']) && isset($box->nid)) {
	  global $user;
    if (_kendra_social_album_access_check('edit', $box, $user)) {
	    return array('status' => 'error', 'message' => 'permission denied');
		}
    $media = _kendra_saracen_trial_lookup_id($data['item']);
    if (empty($media)) {
	    return array('status' => 'error', 'message' => 'invalid media item ID');
    }
    $query = new EntityFieldQuery();
    $res = $query->entityCondition('entity_type', 'relation')
      ->entityCondition('bundle', 'album_contains')
      ->fieldCondition('endpoints', 'entity_id', $box->nid, '=')
      ->fieldCondition('endpoints', 'entity_id', $media, '=')
      ->execute();
    $relation = array_shift($res['relation']);
    
    if (isset($relation->rid)) { 
      relation_delete($relation->rid);
      return array('status' => 'ok', 'message' => 'item deleted from album');
    } else {
      return array('status' => 'error', 'message' => 'no matching item found in album');
    }
    
  } else {
    return array('status' => 'error', 'message' => 'a box ID and item ID is required');
  }
}

function kendra_social_albums_services_resources() {
  return array(
    'boxes' => array(
      'targeted_actions' => array(
        'add_item' => array(
          'callback' => '_kendra_social_albums_add_item',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'box',
              'type' => 'int',
              'optional' => FALSE,
              'source' => array('path' => 0),
            ),  
            array(
              'name' => 'data',
              'type' => 'struct',
              'optional' => FALSE,
              'source' => 'data',
            ),
          ),
        ),
        'user' => array(
          'callback' => '_kendra_social_albums_update_user',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'optional' => FALSE,
              'source' => array('path' => 0),
            ),
            array( 
              'name' => 'data',
              'type' => 'struct',
              'optional' => TRUE,
              'source' => 'data',
            ),
          ),
        ),
        'delete_item' => array(
          'callback' => '_kendra_social_albums_delete_item',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'box',
              'type' => 'int',
              'optional' => FALSE,
              'source' => array('path' => 0),
            ),  
            array(
              'name' => 'data',
              'type' => 'struct',
              'optional' => FALSE,
              'source' => 'data',
            ),
          ),
        ),
      ),
      'operations' => array(
        'index' => array(
          'callback' => '_kendra_social_albums_index',
          'access arguments' => array('access content'),
        ),
        'retrieve' => array(
          'callback' => '_kendra_social_albums_retrieve',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'optional' => FALSE,
              'source' => array('path' => 0),
            ),
          ),
        ),
        'create' => array(
          'callback' => '_kendra_social_albums_create',
          'access callback' => '_kendra_saracen_trial_temp_callback',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'data',
              'type' => 'struct',
              'description' => 'The media item object',
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),  
        ),
      ),
    ),
  );
}
