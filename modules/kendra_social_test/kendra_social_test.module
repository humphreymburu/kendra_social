<?php

/**
 * @file
 * Kendra Social Tests module file.
 */

/**
 * @defgroup kendra_social_test
 * @ingroup kendra_social_test
 * @{
 * These functions exercise the Kendra Social API features using AJAX.
 */

/**
 * Implements hook_init().
 function kendra_social_test_init() {
 drupal_get_path('module', 'kendra_social_test') . '/kendra_social_test.css';
 drupal_get_path('module', 'kendra_social_test') . '/kendra_social_test.js';
 }
 */

/**
 * Implements hook_menu().
 *
 * Sets up calls to drupal_get_form() for all our example cases.
 */
function kendra_social_test_menu() {
	$items = array();

	// Generate different textfields based on form state.
	$items['kendra_api_test'] = array(
    'title' => 'Kendra API Test',
	    'page callback' => 'drupal_get_form',
    'page arguments' => array('kendra_social_test_api'),
    'access callback' => TRUE,
    'expanded' => TRUE,
      'weight' => 0,
	);

	return $items;
}

/**
 * Exercise the Kendra Social API features
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function kendra_social_test_api($form, &$form_state) {
	global $user, $_GET;
	$default_data = '';
	$default_method = '';
	$default_path = '';

	$kendra_social_services_endpoint_prefix = variable_get('KENDRA_SOCIAL_SERVICES_ENDPOINT_PREFIX', 'saracen/0.1');
	
	$form['#attached']['css'] = array(
	drupal_get_path('module', 'kendra_social_test') . '/kendra_social_test.css',
	);
	$form['#attached']['js'] = array(
	drupal_get_path('module', 'kendra_social_test') . '/kendra_social_test.js',
		'https://raw.github.com/klokie/prettyPrint.js/master/prettyprint.js',
	);

	$options_content_type = _kendra_social_test_get_content_type_options();
	if (isset($_GET['endpoint_content_type'])) {
		$default_content_type = check_plain(urldecode($_GET['endpoint_content_type']));
	} else if (isset($form_state['values']['content_type'])) {
		$default_content_type = $form_state['values']['content_type'];
	} else {
		$default_content_type = key($options_content_type);
	}

	$options_method = _kendra_social_test_get_method_options();
	if (isset($_GET['endpoint_method'])) {
		$default_method = check_plain(urldecode($_GET['endpoint_method']));
	} else if (isset($form_state['values']['method'])) {
		$default_method = $form_state['values']['method'];
	} else {
		$default_method = key($options_method);
	}

	if (isset($_GET['endpoint_data'])) {
		$default_data = str_ireplace('&amp;', '&', check_plain(urldecode($_GET['endpoint_data'])));
	} else if (isset($form_state['values']['data'])) {
		$default_data = $form_state['values']['data'];
	}

	$uid = $user->uid;
	if (!$uid) $uid = '{UID}';

	if (isset($_GET['endpoint_path'])) {
		$default_path = str_ireplace('&amp;', '&', check_plain(urldecode($_GET['endpoint_path'])));
	} else if ($uid > 0) {
		$default_path = $kendra_social_services_endpoint_prefix . "/user/" . $uid;
	} else {
		$default_method = 'POST';
		$default_path = (isset($form_state['values']['url'])) ? $form_state['values']['url'] : $kendra_social_services_endpoint_prefix . "/user/login";
		$default_data = 'username=foo&password=bar';
	}

	$form['kendra-social-box'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="kendra-social-box">',
    '#suffix' => '</div>',
    '#markup' => '<h1>' . t('What is your Request?'). '</h1>',
	);

	$form['data'] = array(
	 '#type' => 'textarea',
	 '#title' => 'Data',
	 '#default_value' => $default_data,
	 '#required' => FALSE,
		'#rows' => 1,
		'#cols' => 20,
	);

	$form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Endpoint URL'),
    '#prefix' => '<div id="replace_textfield_div">',
    '#suffix' => '</div>',
    '#required' => TRUE,
    '#default_value' => $default_path,
    '#size' => 32,
    '#maxlength' => 32,
	);

	$form['content_type'] = array(
    '#type' => 'select',
    '#title' => 'Content Type',
    '#options' => $options_content_type,
    '#default_value' => $default_content_type,
    '#required' => TRUE,
	);

	$form['method'] = array(
    '#type' => 'select',
    '#title' => 'HTTP Method',
    '#options' => $options_method,
    '#default_value' => $default_method,
    '#required' => TRUE,
	);

	$form['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
	//'callback' => 'kendra_social_test_submit_driven_callback',
	'keypress' => TRUE,
	//'path' => $options_url,
	'wrapper' => 'response',
      'name' => 'submit1',
	),
    '#value' => t('Submit'),
	);

	$form['textfields'] = array(
    '#title' => t("Server response"),
    '#prefix' => '<div id="response-fields">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
	);

	$form['textfields']['response'] = array(
    '#type' => 'markup',
	'#title' => t("Response"),
    '#prefix' => '<div id="response">',
    '#suffix' => '</div>',
    '#markup' => t('Press Submit to make your request.'),
	);

	$form['docs'] = array(
    '#title' => t("Examples"),
    '#prefix' => '<div id="examples">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
	);

	$form['docs']['examples'] = array(
    '#title' => t("Links"),
    '#prefix' => '<div id="example-links">',
    '#suffix' => '</div>',
    '#type' => 'markup',
    '#markup' => '<ul id="samples"><li>' . join('</li><li>', _kendra_social_test_get_test_links($uid)) . '</li></ul>',
	);

	return $form;
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the params in it.
 */
function kendra_social_test_add_more_callback($form, $form_state) {
	return $form['params_fieldset'];
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function kendra_social_test_add_more_add_one($form, &$form_state) {
	$form_state['num_params']++;
	$form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove one" button.
 *
 * Decrements the max counter and causes a form rebuild.
 */
function kendra_social_test_add_more_remove_one($form, &$form_state) {
	if ($form_state['num_params'] > 1) {
		$form_state['num_params']--;
	}
	$form_state['rebuild'] = TRUE;
}

/**
 */
function kendra_social_test_validate(&$form_state, $form) {
	if (empty($form_state['values']['url']['#value'])) {
		form_set($form_state['values']['url'], t('This field is required.'));
		return false;
	} else if (!valid_url($form_state['values']['url'])) {
		form_set_error('url', t('Enter a valid URL.'));
		return false;
	}
	return true;
}

/**
 * Helper function to populate a dropdown.
 *
 * @return array of options
 */
function _kendra_social_test_get_content_type_options() {
	// drupal_map_assoc() just makes an array('String' => 'String'...).
	return drupal_map_assoc(array('application/json', 'application/xml', 'application/x-www-form-urlencoded'));
}

/**
 * Helper function to populate a dropdown.
 *
 * @return array of options
 */
function _kendra_social_test_get_method_options() {
	// drupal_map_assoc() just makes an array('String' => 'String'...).
	return drupal_map_assoc(array('GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'OPTIONS', 'PROPFIND', 'COPY', 'MOVE'));
}

/**
 * Helper function to supply some test links.
 *
 * @return array of links
 */
function _kendra_social_test_get_test_links($UID = '{UID}') {
	$kendra_social_services_endpoint_prefix = variable_get('KENDRA_SOCIAL_SERVICES_ENDPOINT_PREFIX', 'saracen/0.1');

	return array(
	l("User Register","kendra_api_test",array("query"=>array("endpoint_path"=>$kendra_social_services_endpoint_prefix . "/user/register", "endpoint_method"=>"POST", "endpoint_data"=>"name=testuser&mail=test@example.com&pass="))),
	l("User Login","kendra_api_test",array("query"=>array("endpoint_path"=>$kendra_social_services_endpoint_prefix . "/user/login", "endpoint_method"=>"POST", "endpoint_data"=>"username={name}&password={pass}"))),
	l("Facebook Connect","kendra_api_test",array("query"=>array("endpoint_path"=>$kendra_social_services_endpoint_prefix . "/social/connect", "endpoint_method"=>"POST", "endpoint_data"=>"network=facebook"))),
	l("Store user profile data","kendra_api_test",array("query"=>array("endpoint_path"=>$kendra_social_services_endpoint_prefix . "/profile/{$UID}", "endpoint_method"=>"POST", "endpoint_data"=>"name={property_name}&value={value}"))),
	l("Retrieve a user's profile data","kendra_api_test",array("query"=>array("endpoint_path"=>$kendra_social_services_endpoint_prefix . "/user/{$UID}", "endpoint_method"=>"GET"))),
	l("Set up a Smart Filter","kendra_api_test",array("query"=>array("endpoint_path"=>$kendra_social_services_endpoint_prefix . "/filter", "endpoint_method"=>"PUT", "endpoint_data"=>"name={filter_name}&smart_filter={smart_filter_obj}"))),
	l("Retrieve Smart Filter","kendra_api_test",array("query"=>array("endpoint_path"=>$kendra_social_services_endpoint_prefix . "/profile/filter/{filter_name}", "endpoint_method"=>"GET"))),
	l("Post content to social network","kendra_api_test",array("query"=>array("endpoint_path"=>$kendra_social_services_endpoint_prefix . "/social/publish", "endpoint_method"=>"POST", "endpoint_data"=>"network=facebook&content={CONTENT}"))),
	);
}

/**
 * Select the 'response' element, change the markup in it, and return it as a
 * renderable array.
 *
 * @return renderable array (the response element)
 */
function kendra_social_test_submit_driven_callback($form, $form_state) {
	if (kendra_social_test_validate($form_state, $form)) {
		$element = $form['response'];
		$element['#markup'] = "Clicked submit ({$form_state['values']['op']}): " . date('c');
		return $element;
	}
}

/**
 * @} End of "defgroup kendra_social_test".
 */
